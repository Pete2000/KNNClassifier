std::map<float,std::string > distance2class;
    TrainingSet::ConstIterator iter(set);
    float dist = 0;
    //Creo mappa ordinata secondo la distanza
    while(iter.HasNext()){
      const Document* el = iter.GetNext();
      dist = distance->CalculateDistance(doc,*el);
      distance2class[dist] = el->GetClass();
    }
    //Trovo la classe con maggiori occorrenze nei primi k
    std::map<std::string,int> class2freq;
    std::map<float,std::string>::const_iterator iter2 = distance2class.begin();
    for(int i = 0; i < k; i++){
      class2freq[iter2->second]++;
      iter2++;
    }
    return std::max_element(class2freq.begin(),class2freq.end(),[](const std::pair<std::string,int> el1, const std::pair<std::string,int> el2){return el1.second < el2.second;})->first;    
  
